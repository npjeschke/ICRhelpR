% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/icr_sampling.R
\name{lacy_riffe_calc}
\alias{lacy_riffe_calc}
\title{Lacy Riffe Calculation}
\usage{
lacy_riffe_calc(x, ci = 0.95, min.agree = 0.85, P = "")
}
\arguments{
\item{x}{A numeric value to apply the formula to.}

\item{ci}{A numeric value between 0 and 1 representing the desired degree of confidence (default is 0.95).}

\item{min.agree}{A numeric value between 0 and 1 representing the minimum agreement as a decimal (default is 0.85).
#'          `min.agree` with an additional 0.05 will be used to estimate P.}

\item{P}{An optional numeric value between 0 and 1, representing an estimate of the level of agreement in coding all study units as a decimal. If provided, `P` overrides `min.agree`.
The value will be converted into a decimal (e.g., 90% becomes 0.9). If not provided, the default behavior of adjusting}
}
\value{
The result of the Lacy-Riffe calculation, rounded to 0 decimal places.
}
\description{
This function is an implementation of the formula for calculating intercoder reliability samples developed by Lacy and Riffe (1996).
It requires the user to input the total number of content units being studied (x), then provide their desired degree of confidence
(ci, default is a 95% confidence interval (p=0.05)). It requires an estimate of the level of agreement in coding all study units. This is either estimated from a minimal
acceptable level of agreement (min.agree, default is .85) or another estimate of P, such as from prior ICR work is provided explicitly using the argument P.
The function calculates the result based on the formula provided and provides a sample size (rounded to the nearest whole number) that will "permit a known degree
of confidence that the agreement in a sample of test units is representative of the pattern that would occur if all study units were coded by all coders."
}
\examples{
result <- lacy_riffe_calc(100)
result_custom <- lacy_riffe_calc(100, ci = 0.99, min.agree = 0.9)
result_with_P <- lacy_riffe_calc(100, P = .90)  # Uses P instead of min.agree
}
